// Author: mollnn
// 
// 本代码由测试账号提交，不参与排名！
// 本代码由测试账号提交，不参与排名！
// 本代码由测试账号提交，不参与排名！
// 本代码由测试账号提交，不参与排名！
// 本代码由测试账号提交，不参与排名！
// 本代码由测试账号提交，不参与排名！
// 本代码由测试账号提交，不参与排名！
// 本代码由测试账号提交，不参与排名！
// 本代码由测试账号提交，不参与排名！
// 本代码由测试账号提交，不参与排名！
// 本代码由测试账号提交，不参与排名！
// 本代码由测试账号提交，不参与排名！
// 本代码由测试账号提交，不参与排名！
// 本代码由测试账号提交，不参与排名！
// 本代码由测试账号提交，不参与排名！
// 本代码由测试账号提交，不参与排名！
// 本代码由测试账号提交，不参与排名！
// 本代码由测试账号提交，不参与排名！
// 本代码由测试账号提交，不参与排名！
// 本代码由测试账号提交，不参与排名！


#include <bits/stdc++.h>
using namespace std;

#define int long long


#pragma GCC optimize(2)
#pragma GCC optimize(3, "Ofast", "inline")
#pragma GCC optimize("Ofast")
#pragma GCC optimize("inline")
#pragma GCC optimize("-fgcse")
#pragma GCC optimize("-fgcse-lm")
#pragma GCC optimize("-fipa-sra")
#pragma GCC optimize("-ftree-pre")
#pragma GCC optimize("-ftree-vrp")
#pragma GCC optimize("-fpeephole2")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-fsched-spec")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("-falign-jumps")
#pragma GCC optimize("-falign-loops")
#pragma GCC optimize("-falign-labels")
#pragma GCC optimize("-fdevirtualize")
#pragma GCC optimize("-fcaller-saves")
#pragma GCC optimize("-fcrossjumping")
#pragma GCC optimize("-fthread-jumps")
#pragma GCC optimize("-funroll-loops")
#pragma GCC optimize("-freorder-blocks")
#pragma GCC optimize("-fschedule-insns")
#pragma GCC optimize("inline-functions")
#pragma GCC optimize("-ftree-tail-merge")
#pragma GCC optimize("-fschedule-insns2")
#pragma GCC optimize("-fstrict-aliasing")
#pragma GCC optimize("-fstrict-overflow")
#pragma GCC optimize("-falign-functions")
#pragma GCC optimize("-fcse-follow-jumps")
#pragma GCC optimize("-fsched-interblock")
#pragma GCC optimize("-fpartial-inlining")
#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("-freorder-functions")
#pragma GCC optimize("-findirect-inlining")
#pragma GCC optimize("-fhoist-adjacent-loads")
#pragma GCC optimize("-frerun-cse-after-loop")
#pragma GCC optimize("inline-small-functions")
#pragma GCC optimize("-finline-small-functions")
#pragma GCC optimize("-ftree-switch-conversion")
#pragma GCC optimize("-foptimize-sibling-calls")
#pragma GCC optimize("-fexpensive-optimizations")
#pragma GCC optimize("inline-functions-called-once")
#pragma GCC optimize("-fdelete-null-pointer-checks")
const int __ = 355;const double ___ = 1e9;const double ____ = 0;vector<pair<pair<int, int>, int>> _____[__];int ______, _______, ________;int _________[__ * 20], __________[__ * 20];int ___________[__ * 20], ____________[__ * 20];int _____________[__], ______________[__], _______________[__], ________________[__];int __________________________________[__];struct ___________________________________{    int ____________________________, ________________;    double ______________________________________, _______________________________________;};vector<___________________________________> __________________;vector<int> __________________________________________(int ___________________________________){    int ___________________ = _________[___________________________________], ____________________ = __________[___________________________________];    memset(_____________, 0x3f, sizeof _____________);    memset(________________, 0, sizeof ________________);    memset(______________, 0, sizeof ______________);    memset(_______________, 0, sizeof _______________);    deque<int> _____________________;    _____________[___________________] = 0;    ________________[___________________] = 1;    _____________________.push_back(___________________);    while (!_____________________.empty())    {        int ________________________________ = _____________________.front();        _____________________.pop_front();        ________________[________________________________] = 0;        int siz = _____[________________________________].size();        for (int ____________________________________ = 0; ____________________________________ < siz; ____________________________________++)        {            int ________ = _____[________________________________][____________________________________].first.first, ______________________________ = _____[________________________________][____________________________________].first.second, ______________________________________ = _____[________________________________][____________________________________].second;            if (_____________[________] > _____________[________________________________] + ______________________________________)            {                _____________[________] = _____________[________________________________] + ______________________________________;                ______________[________] = ________________________________;                _______________[________] = ______________________________;                if (!________________[________])                {                    ________________[________] = 1;                    _____________________.push_back(________);                }            }        }    }    vector<int> ______________________;    double _______________________ = _____________[____________________];    int ________________________________ = ____________________;    while (________________________________)    {        ______________________.push_back(________________________________);        if (______________[________________________________])            ______________________.push_back(_______________[________________________________]);        ________________________________ = ______________[________________________________];    }    reverse(______________________.begin(), ______________________.end());    return ______________________;}double addPath(const vector<int> &______________________, double ___________________________________________ = 1){    double _______________________ = 0;    for (int ____________________________________ = 0; ____________________________________ + 2 < ______________________.size(); ____________________________________ += 2)    {        int ____________________________ = ______________________[____________________________________], ________________ = ______________________[____________________________________ + 2];        int ______________________________ = ______________________[____________________________________ + 1];        int _______________________________ = ____________[______________________________];        _______________________ += _____[____________________________][_______________________________].second;        ___________[______________________________]++;        _____[____________________________][_______________________________].second += 2 * ___________________________________________ * ___ * __________________[______________________________]._______________________________________ * __________________[______________________________].______________________________________;    }    return _______________________;}double delPath(const vector<int> &______________________, double ___________________________________________ = 1){    double _______________________ = 0;    for (int ____________________________________ = 0; ____________________________________ + 2 < ______________________.size(); ____________________________________ += 2)    {        int ____________________________ = ______________________[____________________________________], ________________ = ______________________[____________________________________ + 2];        int ______________________________ = ______________________[____________________________________ + 1];        int _______________________________ = ____________[______________________________];        ___________[______________________________]--;        _____[____________________________][_______________________________].second -= 2 * ___________________________________________ * ___ * __________________[______________________________]._______________________________________ * __________________[______________________________].______________________________________;        _______________________ -= _____[____________________________][_______________________________].second;    }    return _______________________;}void solve(){    __________________.clear();    cin >> ______ >> _______ >> ________;    vector<vector<int>> _________________________(________ + 2);    vector<double> __________________________(________ + 2);    memset(___________, 0, sizeof ___________);    memset(__________________________________, 0, sizeof __________________________________);    memset(____________, 0, sizeof ____________);    int ___________________________ = 0;    for (int ____________________________________ = 1; ____________________________________ <= ______; ____________________________________++)        _____[____________________________________].clear();    for (int ____________________________________ = 0; ____________________________________ < ________; ____________________________________++)        cin >> _________[____________________________________] >> __________[____________________________________], _________[____________________________________]++, __________[____________________________________]++;    for (int ____________________________________ = 1; ____________________________________ <= _______; ____________________________________++)    {        int ____________________________, ________________;        double ______________________________________, _______________________________________, ________________________________________;        cin >> ____________________________ >> ________________ >> ______________________________________ >> _______________________________________ >> ________________________________________;        ++____________________________;        ++________________;        __________________.push_back({____________________________, ________________, ______________________________________, _______________________________________});        __________________.push_back({________________, ____________________________, ______________________________________, ________________________________________});        _____[____________________________].push_back({{________________, 2 * ____________________________________ - 2}, ______________________________________ * ___});        ____________[2 * ____________________________________ - 2] = _____[____________________________].size() - 1;        _____[________________].push_back({{____________________________, 2 * ____________________________________ - 1}, ______________________________________ * ___});        ____________[2 * ____________________________________ - 1] = _____[________________].size() - 1;        __________________________________[____________________________]++;        __________________________________[________________]++;    }    vector<int> qid;    for (int ____________________________________ = 0; ____________________________________ < ________; ____________________________________++)        qid.push_back(____________________________________);    double _____________________________________________ = 0;    for (int ____________________________________ = 1; ____________________________________ <= 8 * ((______ + _______) * 7 + ________); ____________________________________++)    {        int ___________________________________ = rand() * rand() % qid.size();        vector<int> ______________________ = _________________________[___________________________________];        if (______________________.size())        {            double ______________________________________________ = delPath(______________________);            _____________________________________________ -= ______________________________________________;        }        ______________________ = __________________________________________(___________________________________);        double _______________________ = addPath(______________________);        _________________________[___________________________________] = ______________________;        __________________________[___________________________________] = _______________________;        _____________________________________________ += _______________________;    }    for (int ____________________________________ = 0; ____________________________________ < ________; ____________________________________++)    {        int ___________________________________ = ____________________________________;        vector<int> ______________________ = _________________________[___________________________________];        if (______________________.size() == 0)        {            ______________________ = __________________________________________(___________________________________);            double _______________________ = addPath(______________________);            _________________________[___________________________________] = ______________________;            __________________________[___________________________________] = _______________________;            _____________________________________________ += _______________________;        }    }    for (int ____________________________________ = 0; ____________________________________ < ________; ____________________________________++)    {        cout << _________________________[____________________________________].size() << endl;        for (int _____________________________________ = 0; _____________________________________ < _________________________[____________________________________].size(); _____________________________________++)        {            cout << _________________________[____________________________________][_____________________________________] - (_____________________________________ % 2 == 0) << " ";        }        cout << endl;    }    }signed main(){    srand(0);    ios::sync_with_stdio(false);    int ________________________;    cin >> ________________________;    while (________________________--)        solve();}// 本代码由测试账号提交，不参与排名！// 本代码由测试账号提交，不参与排名！// 本代码由测试账号提交，不参与排名！// 本代码由测试账号提交，不参与排名！// 本代码由测试账号提交，不参与排名！// 本代码由测试账号提交，不参与排名！// 本代码由测试账号提交，不参与排名！// 本代码由测试账号提交，不参与排名！// 本代码由测试账号提交，不参与排名！// 本代码由测试账号提交，不参与排名！// 本代码由测试账号提交，不参与排名！// 本代码由测试账号提交，不参与排名！// 本代码由测试账号提交，不参与排名！// 本代码由测试账号提交，不参与排名！